并发锁问题
============================
参考资料： `老大难的分布式锁与幂等性问题，如何解决？长文干货！ <https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247488612&idx=1&sn=da9e2759035d14ef1d9656ac9fd95971&chksm=eb539152dc2418445d74b384da03fccfc3ab47c3b0db11abc2f63d8c31692005a9812f7d709d&scene=21#wechat_redirect>`_

这里我们讨论的下面几个问题。

- 并发锁的实现思路。
- 分布式锁
- 幂等问题
- 分布式中唯一ID的生成

并发锁的实现思路
^^^^^^^^^^^^^^^^^^^^
- 监视器：Java线程中 ``synchronized`` 与 ``ReentrantLock`` 都是这个思路
- 临界段：多进程中的临界段资源如：打印机、硬盘/内存中的贡献数据（如共享内存）。

  注意：线程中的 ``synchronized`` 是模仿它们，但实现原理还是“监视器”思路。同步块的入口位置和退出位置分别插入monitorenter和monitorexit字节码指令 或者 在Class文件的方法表中将该方法的access_flags字段中的synchronized标志位置1。（这个在specification中没有明确说明。）

- 信号量：多线程的信号量、多线程的 ``Semaphore`` 。

多进程的解决方案
  临界资源、信号量

多线程的解决方案
  ReentrantLock 、synchronized、Semaphore。

分布式的解决方案
  分布式锁

分布式锁
^^^^^^^^^^^^^^^^^^^^^
基本条件
  - 需要有存储锁的空间，并且锁的空间是可以访问到的。Mysql、Redis、Tair、Memcached、MongoDB、Zookeeper，都可以解决这个条件。
  - 锁需要被唯一标识。
  - 锁要有至少两种状态。

主要问题
  - 锁状态判断原子性无法保证
  - 网络断开或主机宕机，锁状态无法清除
  - 无法保证释放的是自己上锁的那把锁

进阶要求
  - 可重入：
  - 惊群效应：虽然该效应被列入了“进阶要求”，但是 *惊群效应* 是不被提倡使用的，因为它的开销会很大。
  - 公平锁和非公平锁
  - 阻塞锁和自旋锁

典型实现
  - ZooKeeper的实现
  - Redis的实现
  - Tair的实现
  - Cerberus分布式锁

重点推荐
  Cerberus分布式锁

幂等性问题
^^^^^^^^^^^^^^^^^^^^^^^^^^
所谓幂等，简单地说，就是对接口的多次调用所产生的结果和调用一次是一致的。扩展一下，这里的接口，可以理解为对外发布的HTTP接口或者Thrift接口，也可以是接收消息的内部接口，甚至是一个内部方法或操作。参考： `服务高可用 <http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247484866&idx=1&sn=e9a6d0719003bd45ce555702d391f804&chksm=eb5380f4dc2409e27e5a1d6bdb9255d6d476bbdfd6321d637b79ef2120ca8710a50f6e08c0f7&scene=21#wechat_redirect>`_ ： `幂等性设计 <http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247484866&idx=1&sn=e9a6d0719003bd45ce555702d391f804&chksm=eb5380f4dc2409e27e5a1d6bdb9255d6d476bbdfd6321d637b79ef2120ca8710a50f6e08c0f7&scene=21#wechat_redirect>`_ 。

幂等问题的场景举例：

- 在App中下订单的时候，点击确认之后，没反应，就又点击了几次。在这种情况下，如果无法保证该接口的幂等性，那么将会出现重复下单问题。
- 在接收消息的时候，消息推送重复。如果处理消息的接口无法保证幂等，那么重复消费消息产生的影响可能会非常大。

在分布式环境中，网络环境更加复杂，因前端操作抖动、网络故障、消息重复、响应速度慢等原因，对接口的重复调用概率会比集中式环境下更大，尤其是重复消息在分布式环境中很难避免。

分布式环境中，有些接口是天然保证幂等性的，如查询操作。有些对数据的修改是一个常量，并且无其他记录和操作，那也可以说是具有幂等性的。其他情况下，所有涉及对数据的修改、状态的变更就都有必要防止重复性操作的发生。通过间接的实现接口的幂等性来防止重复操作所带来的影响，成为了一种有效的解决方案。比如： ``GTIS`` 。

GTIS
::::::::::::::::::::
待续

参考： `老大难的分布式锁与幂等性问题，如何解决？ <https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247488612&idx=1&sn=da9e2759035d14ef1d9656ac9fd95971&chksm=eb539152dc2418445d74b384da03fccfc3ab47c3b0db11abc2f63d8c31692005a9812f7d709d&scene=21#wechat_redirect>`_
